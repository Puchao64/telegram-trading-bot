const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();
const token = process.env.BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/ping/, (msg) => {
    bot.sendMessage(msg.chat.id, 'pong');
});

const Parser = require('rss-parser');
const parser = new Parser(); 
const rssUrl = 'https://www.coindesk.com/arc/outboundfeeds/rss/';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
async function fetchNews() {
    try {
        console.log(`üì∞ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏...`);

        const feed = await parser.parseURL(rssUrl);

        if (!feed.items || feed.items.length === 0) {
            console.log('‚ùå –û—à–∏–±–∫–∞: –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return null;
        }

        console.log(`‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.`);

        let newsMessage = `*üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ CoinDesk:*\n\n`;

        feed.items.slice(0, 5).forEach((item, index) => {
            newsMessage += `${index + 1}. [${item.title}](${item.link})\nüìÖ ${item.pubDate}\n\n`;
        });
       return newsMessage;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: ${error.message}`);
        return null;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news
bot.onText(/\/news/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /news`);

    const newsMessage = await fetchNews();
    if (newsMessage) {
        bot.sendMessage(chatId, newsMessage, { parse_mode: "Markdown" });
    } else {
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.");
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price
bot.onText(/\/price/, async (msg) => {
  const chatId = msg.chat.id;
  console.log("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /price");

  try {
    const response = await axios.get(
      'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd'
    );

    const btc = response.data.bitcoin.usd;
    const eth = response.data.ethereum.usd;

    const priceMessage = `üí∞ *Current Prices:*\n\n` +
                         `‚Ä¢ BTC: *$${btc}*\n` +
                         `‚Ä¢ ETH: *$${eth}*`;

    bot.sendMessage(chatId, priceMessage, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω:", error.message);
    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã.");
  }
});
bot.onText(/\/buy (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const symbol = match[1].toUpperCase();

  const allowed = ['BTC', 'ETH'];
  if (!allowed.includes(symbol)) {
    return bot.sendMessage(chatId, `‚ùå Unsupported asset: ${symbol}. Try BTC or ETH.`);
  }

  try {
  const response = await axios.get('https://api.coingecko.com/api/v3/simple/price', {
      params: {
        ids: 'bitcoin,ethereum',
        vs_currencies: 'usd'
      }
    });

    const price = symbol === 'BTC' ? response.data.bitcoin.usd : response.data.ethereum.usd;
    const buyMessage = `üõí *Simulated Buy Order for ${symbol}*\nCurrent Price: $${price}\nOrder comple>

    bot.sendMessage(chatId, buyMessage, { parse_mode: "Markdown" });

  } catch (error) {
    console.error("Error fetching price:", error.message);
    bot.sendMessage(chatId, "‚ùå Failed to fetch price.");
  }
});


